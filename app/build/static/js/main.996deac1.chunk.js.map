{"version":3,"sources":["routes/AppRoutes.enum.ts","components/Header.tsx","contexts/GlobalContext.ts","components/PostQuillContainer.tsx","components/Post.tsx","components/PostSummary.tsx","components/Home.tsx","components/PostContainer.tsx","components/UserContainer.tsx","clients/APIHTTPClient.ts","components/TagGroup.tsx","components/PostComposer.tsx","components/PostPreview.tsx","components/Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppRoutes","className","this","props","Navbar","expand","variant","Brand","href","Collapse","Nav","Item","Link","YOUTUBE_CHANNEL_URL","to","NEW","style","verticalAlign","icon","Form","inline","InputGroup","FormControl","type","placeholder","Append","Button","Component","ClientContext","React","createContext","client","undefined","defaultUser","updateModal","PostQuillContainer","value","content","readOnly","modules","syntax","toolbar","Post","onClickListener","bind","event","preventDefault","context","enabled","title","body","footer","username","Card","Title","canBeModal","Body","onClick","id","cursor","createdAt","Text","Date","toString","contextType","GlobalContext","PostSummary","Home","state","posts","author","latestPost","mounted","showLatestPost","updatePosts","console","debug","setTimeout","length","getPostsByUser","postsByUserRequestResponse","latestPostId","getPost","map","post","setState","error","color","link","Jumbotron","Row","Col","key","PostContainer","postData","match","params","postId","getUser","userId","user","log","UserContainer","ENDPOINT","window","location","hostname","LOCAL_API_GATEWAY_ENDPOINT","API_GATEWAY_ENDPOINT","USER_REQUEST_URL","USER_PATH","POST_REQUEST_URL","POST_PATH","APIHTTPClient","getUserByUsername","getDefaultUser","submitPost","axios","get","headers","timeout","responseType","withCredentials","then","response","data","catch","e","USER_ID","JSON","parse","stringify","validateTag","tagValue","test","TagGroup","badgesFromProps","tags","forEach","push","Badge","pill","data-tag-value","removeTagListener","PostComposer","editorRef","Set","editorDelta","formValidated","titleInvalid","tagsInvalid","quillValid","createRef","handleQuillChange","handlePreviewClick","handleFormChangeEvent","handleCancel","tagsChangeListener","validateForm","list","script","indent","size","header","background","font","align","history","goBack","hasOwnProperty","current","getEditor","getContents","target","currentTarget","trim","onSubmit","currTags","add","tagToRemove","getAttribute","delete","isValid","validated","Group","controlId","Label","Control","isInvalid","onChange","ref","defaultValue","as","onKeyPress","ButtonToolbar","PostPreview","Alert","Heading","onEditor","onSave","Delta","Quill","import","Editor","delta","insert","preview","postDataChangeListener","toggleComposer","savePostData","editMode","mode","App","modal","closeModal","Container","Provider","exact","path","component","Modal","show","onHide","centered","autoFocus","backdrop","Header","closeButton","Footer","Boolean","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.996deac1.chunk.js","sourcesContent":["enum AppRoutes {\n  POST = \"/post\",\n  EDIT = \"/edit\",\n  HOME = \"/\",\n  USER = \"/user\",\n  NEW = \"/new\"\n}\nexport default AppRoutes;\n","import Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { Button, InputGroup } from \"react-bootstrap\";\n\nimport MaterialIcon from \"@material/react-material-icon\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport AppRoutes from \"../routes/AppRoutes.enum\";\nimport { YOUTUBE_CHANNEL_URL } from \"../config.json\";\n\ntype HeaderProps = {\n  className?: string;\n};\n\nexport default class extends Component<HeaderProps> {\n  render() {\n    return (\n      <div className={this.props.className}>\n        <Navbar expand=\"md\" variant={\"dark\"} className=\"px-md-0\">\n          <Navbar.Brand href=\"/\">חי</Navbar.Brand>\n          <Navbar.Collapse>\n            <Nav className=\"mr-auto\">\n              <Nav.Item>\n                <Nav.Link href={YOUTUBE_CHANNEL_URL}>YouTube</Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Navbar.Collapse>\n          <Nav className=\"ml-auto mr-lg-2 mr-sm-0\">\n            <LinkContainer to={AppRoutes.NEW}>\n              <Nav.Link>\n                <Nav.Item>\n                  <span className=\"mr-1\" style={{ verticalAlign: \"middle\" }}>\n                    Add Post\n                  </span>\n                  <MaterialIcon\n                    style={{ verticalAlign: \"middle\" }}\n                    icon={\"add_circle\"}\n                  />\n                </Nav.Item>\n              </Nav.Link>\n            </LinkContainer>\n          </Nav>\n          <Form inline>\n            <Navbar.Collapse>\n              <InputGroup>\n                <FormControl type=\"text\" placeholder=\"Search\" />\n                <InputGroup.Append>\n                  <Button variant={\"secondary\"} className={\"py-0\"}>\n                    <MaterialIcon className={\"align-middle\"} icon={\"search\"} />\n                  </Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </Navbar.Collapse>\n          </Form>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport APIHTTPClient from \"../clients/APIHTTPClient\";\nimport { UserData } from \"../types/User\";\nimport * as quill from \"quill\";\n\nexport type ModalState = {\n  enabled: boolean;\n  title?: JSX.Element;\n  body?: string | quill.DeltaStatic;\n  footer?: JSX.Element;\n};\n\ntype GlobalContext = {\n  client?: APIHTTPClient;\n  defaultUser?: UserData;\n  updateModal?: (modal: ModalState) => void;\n};\n\nconst ClientContext = React.createContext<GlobalContext>({\n  client: undefined,\n  defaultUser: undefined,\n  updateModal: undefined\n});\nexport default ClientContext;\n","import React, { Component } from \"react\";\nimport ReactQuill from \"react-quill\";\nimport { Delta } from \"quill\";\nexport type PostQuillContainerProps = {\n  content: string | Delta;\n};\n\nexport default class PostQuillContainer extends Component<\n  PostQuillContainerProps\n> {\n  render() {\n    return (\n      <ReactQuill\n        value={this.props.content}\n        readOnly={true}\n        modules={{\n          syntax: true,\n          toolbar: []\n        }}\n        className={\"quill-no-toolbar\"}\n      />\n    );\n  }\n}\n","import React, { Component, MouseEvent } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport GlobalContext from \"../contexts/GlobalContext\";\nimport PostQuillContainer from \"./PostQuillContainer\";\nimport * as quill from \"quill\";\nexport type PostProps = {\n  id?: string;\n  title: string | JSX.Element;\n  createdAt?: number;\n  content: quill.Delta | string;\n  username?: JSX.Element | string;\n  tags?: Set<string>;\n  canBeModal?: boolean;\n} | null;\nclass Post extends Component<PostProps> {\n  static contextType = GlobalContext;\n\n  constructor(props: PostProps) {\n    super(props);\n    this.onClickListener = this.onClickListener.bind(this);\n  }\n\n  onClickListener(event: MouseEvent): void {\n    event.preventDefault();\n    this.context.updateModal({\n      enabled: true,\n      title: this.props.title,\n      body: this.props.content,\n      footer: this.props.username\n    });\n  }\n\n  render() {\n    const title = (\n      <Card.Title className=\"display-4\">{this.props.title}</Card.Title>\n    );\n    return (\n      <Card className={`mt-4 mb-4 ${this.props.canBeModal && \"card-modal\"}`}>\n        <Card.Body>\n          {this.props.canBeModal ? (\n            <LinkContainer\n              onClick={this.onClickListener}\n              to={`/post/${this.props.id}`}\n              style={{ cursor: \"pointer\" }}\n            >\n              {title}\n            </LinkContainer>\n          ) : (\n            <>{title}</>\n          )}\n          {this.props.createdAt && (\n            <>\n              <Card.Text>\n                <small className=\"text-muted\">\n                  Created on {new Date(this.props.createdAt).toString()}\n                </small>\n              </Card.Text>\n              <hr />\n            </>\n          )}\n          {typeof this.props.content === \"object\" ? (\n            <PostQuillContainer content={this.props.content} />\n          ) : (\n            <Card.Text>{this.props.content}</Card.Text>\n          )}\n          <hr />\n          <Card.Text>\n            <small>\n              By{\" \"}\n              <a href={`/user/${this.props.username}`}>{this.props.username}</a>\n            </small>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default Post;\n","import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\n\ntype PostSummaryProps = {\n  id: string;\n  title: string;\n  createdAt: number;\n  username: string;\n  tags?: Array<string>;\n};\n\nclass PostSummary extends Component<PostSummaryProps> {\n  render() {\n    return (\n      <Card className=\"mt-4 mb-4\">\n        <Card.Body>\n          <Card.Title className=\"display-4\">{this.props.title}</Card.Title>\n          <hr />\n          <Card.Text>\n            <small className=\"text-muted\">\n              Created on {new Date(this.props.createdAt).toString()} | By{\" \"}\n              <a href=\"#\">{this.props.username}</a>\n            </small>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\n// function PostOld(\n//   this: any,\n//   { id, title, createdAt, content, username, tags }: PostState\n// ) {\n//   return (\n\n//   );\n// }\n\nexport default PostSummary;\n","import React, { Component, MouseEvent } from \"react\";\nimport { Button, Col, Jumbotron, Row } from \"react-bootstrap\";\nimport Post from \"./Post\";\nimport PostSummary from \"./PostSummary\";\nimport GlobalContext from \"../contexts/GlobalContext\";\n\ntype HomeState = {\n  posts: Array<any>;\n  author: any;\n  latestPost: any;\n  mounted: boolean;\n};\n\ntype HomeProps = {\n  className?: string;\n};\n\nexport default class Home extends Component<HomeProps, HomeState> {\n  static contextType = GlobalContext;\n\n  constructor(props: HomeProps) {\n    super(props);\n    this.state = {\n      posts: [],\n      author: null,\n      latestPost: null,\n      mounted: false\n    };\n    this.showLatestPost = this.showLatestPost.bind(this);\n    this.updatePosts = this.updatePosts.bind(this);\n  }\n\n  async updatePosts() {\n    if (!this.context.client) {\n      console.debug(\"Waiting a tick on context...\");\n      setTimeout(this.updatePosts, 1);\n    } else {\n      if (this.state.posts.length === 0 && this.state.latestPost === null) {\n        try {\n          const postsByUserRequestResponse: Array<any> = await this.context.client.getPostsByUser(\n            this.context.defaultUser.id\n          );\n\n          let latestPost = null;\n          if (postsByUserRequestResponse.length > 0) {\n            const latestPostId = postsByUserRequestResponse[0].id;\n            latestPost = await this.context.client.getPost(latestPostId);\n          }\n          postsByUserRequestResponse.map(post => {\n            post.username = this.context.defaultUser.username;\n            return post;\n          });\n          this.setState({\n            author: this.context.defaultUser,\n            posts: postsByUserRequestResponse,\n            latestPost: latestPost\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n  }\n\n  async componentDidMount() {\n    this.updatePosts();\n  }\n\n  showLatestPost(event: MouseEvent) {\n    event.preventDefault();\n    this.context.updateModal({\n      enabled: true,\n      title: this.state.latestPost.title,\n      body: this.state.latestPost.content,\n      footer: this.state.author.username\n    });\n  }\n\n  render() {\n    const latestPost = this.state.posts.length > 0 && (\n      <>\n        <hr className=\"my-2\" />\n        <p>View latest post</p>\n        <p className=\"lead\">\n          <Button\n            color=\"primary\"\n            onClick={this.showLatestPost}\n            href={this.state.posts[0].link}\n          >\n            {this.state.posts[0].title}\n          </Button>\n        </p>\n      </>\n    );\n    return (\n      <div className={this.props.className}>\n        <Jumbotron>\n          <h1 className=\"display-4\">lahiyam</h1>\n          <p className=\"lead display-3\">Nonsensical whisperings</p>\n          {latestPost}\n        </Jumbotron>\n        <Row className=\"mt-0\">\n          <Col className=\"mt-0\">\n            {this.state.latestPost && (\n              <Post\n                id={this.state.latestPost.id}\n                title={this.state.latestPost.title}\n                createdAt={this.state.latestPost.createdAt}\n                content={this.state.latestPost.content}\n                username={this.state.author.username}\n                canBeModal\n              />\n            )}\n            {this.state.posts.map(post => {\n              if (\n                !this.state.latestPost ||\n                post.id !== this.state.latestPost.id\n              ) {\n                return (\n                  <PostSummary\n                    key={post.id}\n                    id={post.id}\n                    title={post.title}\n                    createdAt={post.createdAt}\n                    username={post.username}\n                  />\n                );\n              }\n            })}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Post from \"./Post\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport GlobalContext from \"../contexts/GlobalContext\";\n\ntype PostContainerState = {\n  postData: any;\n};\n\nexport type PostContainerParams = {\n  postId: string;\n};\n\nexport default class PostContainer extends Component<\n  RouteComponentProps<PostContainerParams>,\n  PostContainerState\n> {\n  static contextType = GlobalContext;\n\n  constructor(props: RouteComponentProps<PostContainerParams>) {\n    super(props);\n    this.state = {\n      postData: null\n    };\n  }\n\n  async componentDidMount() {\n    if (this.context.client && !this.state.postData) {\n      try {\n        const post = await this.context.client.getPost(\n          this.props.match.params.postId\n        );\n        if (post) {\n          const user = await this.context.client.getUser(post.userId);\n          post.username = user.username;\n          this.setState({\n            postData: post\n          });\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  async componentDidUpdate() {\n    console.log(this.props);\n  }\n\n  render() {\n    return (\n      this.state.postData && (\n        <Post\n          id={this.state.postData.id}\n          title={this.state.postData.title}\n          content={this.state.postData.content}\n          createdAt={this.state.postData.createdAt || 0}\n          username={this.state.postData.username}\n        />\n      )\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class UserContainer extends Component {\n  render() {\n    return <div>User container</div>;\n  }\n}\n","import axios from \"axios\";\nimport {\n  API_GATEWAY_ENDPOINT,\n  LOCAL_API_GATEWAY_ENDPOINT,\n  POST_PATH,\n  USER_PATH,\n  USER_ID\n} from \"../config.json\";\nimport { PostData } from \"../types/Post\";\nimport { UserData } from \"../types/User\";\nconst ENDPOINT =\n  window.location.hostname === \"localhost\"\n    ? LOCAL_API_GATEWAY_ENDPOINT\n    : API_GATEWAY_ENDPOINT;\nconst USER_REQUEST_URL = ENDPOINT + USER_PATH;\nconst POST_REQUEST_URL = ENDPOINT + POST_PATH;\n\nclass APIHTTPClient {\n  constructor() {\n    this.getUser = this.getUser.bind(this);\n    this.getPost = this.getPost.bind(this);\n    this.getPostsByUser = this.getPostsByUser.bind(this);\n    this.getUserByUsername = this.getUserByUsername.bind(this);\n    this.getDefaultUser = this.getDefaultUser.bind(this);\n    this.submitPost = this.submitPost.bind(this);\n  }\n\n  getUser(id: string): Promise<UserData> {\n    return axios\n      .get(USER_REQUEST_URL, {\n        params: {\n          id: id\n        },\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        },\n        timeout: 3000,\n        responseType: \"json\",\n        withCredentials: false\n      })\n      .then(response => {\n        return response.data;\n      })\n      .catch(e => console.error(e));\n  }\n\n  getUserByUsername(username: string): Promise<UserData> {\n    return axios\n      .get(USER_PATH, {\n        params: {\n          username: username\n        },\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      })\n      .then(response => response.data)\n      .catch(e => console.error(e));\n  }\n\n  getDefaultUser(): Promise<UserData> {\n    return this.getUser(USER_ID);\n  }\n\n  getPost(id: string | null) {\n    return axios\n      .get(POST_REQUEST_URL, {\n        params: {\n          id: id\n        },\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      })\n      .then(response => {\n        response.data.content = JSON.parse(response.data.content);\n        return response.data;\n      })\n      .catch(e => console.error(e));\n  }\n\n  getPostsByUser(userId: string, createdAt?: number) {\n    return axios\n      .get(POST_REQUEST_URL, {\n        params: {\n          userId: userId,\n          createdAt: createdAt\n        },\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      })\n      .then(response => response.data)\n      .catch(e => console.error(e));\n  }\n\n  submitPost(postData: PostData) {\n    return axios\n      .post(\n        POST_REQUEST_URL,\n        {\n          userId: USER_ID,\n          title: postData.title,\n          content: JSON.stringify(postData.content)\n        },\n        {\n          headers: {\n            \"Access-Control-Allow-Origin\": \"*\"\n          }\n        }\n      )\n      .then(response => response.data)\n      .catch(e => console.error(e));\n  }\n}\n\nexport default APIHTTPClient;\n","import React, { Component } from \"react\";\nimport { Badge } from \"react-bootstrap\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\ntype TagGroupProps = {\n  tags: Set<string>;\n  removeTagListener: (event: any) => void;\n  className?: string;\n};\n\ntype TagBadgesState = {\n  tagBadges: JSX.Element[];\n};\n\nexport function validateTag(tagValue: string): boolean {\n  return /^\\w+$/.test(tagValue);\n}\n\nexport default class TagGroup extends Component<TagGroupProps, TagBadgesState> {\n  render() {\n    let badgesFromProps: JSX.Element[] = [];\n    this.props.tags.forEach((value, key) => {\n      badgesFromProps.push(\n        <Badge className=\"mr-2\" pill variant=\"secondary\" key={key}>\n          <span style={{ verticalAlign: \"middle\" }}>{value}</span>\n          <span\n            style={{\n              cursor: \"pointer\"\n            }}\n            data-tag-value={value}\n            onClick={this.props.removeTagListener}\n          >\n            <CancelIcon className=\"ml-1\" />\n          </span>\n        </Badge>\n      );\n    });\n    return (\n      <section className={this.props.className}>{badgesFromProps}</section>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button, ButtonToolbar, Card, Col, Form, Row } from \"react-bootstrap\";\nimport TagGroup, { validateTag } from \"./TagGroup\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport \"../css/quill.css\";\nimport GlobalContext from \"../contexts/GlobalContext\";\nimport * as History from \"history\";\nimport * as Quill from \"quill\";\nimport { PostData } from \"../types/Post\";\ntype PostComposerState = {\n  editorDelta: string | Quill.DeltaStatic | undefined;\n  formValidated: boolean | undefined;\n  title: string | undefined;\n  tags: Set<string> | undefined;\n  titleInvalid: boolean | undefined;\n  tagsInvalid: boolean | undefined;\n  quillValid: boolean | undefined;\n};\n\nexport type PostComposerParams = {\n  postData?: PostData;\n  editMode?: string;\n  history: History.History;\n  onSubmit: (postData: PostData) => void;\n  onSave: () => void;\n};\n\nexport default class PostComposer extends Component<\n  PostComposerParams,\n  PostComposerState\n> {\n  static contextType = GlobalContext;\n  private readonly editorRef: React.RefObject<ReactQuill>;\n  private readonly modules: {};\n\n  constructor(props: PostComposerParams) {\n    super(props);\n    this.state = {\n      title: this.props.postData?.title,\n      tags: this.props.postData?.tags || new Set<string>(),\n      editorDelta: this.props.postData?.content || \"\",\n      formValidated:\n        (this.props.postData?.title &&\n          this.props.postData?.title.length > 0 &&\n          this.props.postData?.content !== undefined) ||\n        false,\n      titleInvalid: undefined,\n      tagsInvalid: undefined,\n      quillValid: true\n    };\n    this.editorRef = React.createRef();\n    this.handleQuillChange = this.handleQuillChange.bind(this);\n    this.handlePreviewClick = this.handlePreviewClick.bind(this);\n    this.handleFormChangeEvent = this.handleFormChangeEvent.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.tagsChangeListener = this.tagsChangeListener.bind(this);\n    this.removeTagListener = this.removeTagListener.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.modules = {\n      toolbar: [\n        [\"bold\", \"italic\", \"underline\", \"strike\"], // toggled buttons\n        [\"blockquote\", \"code-block\"],\n        [\"link\", \"image\", \"video\"], // custom button values\n        [{ list: \"ordered\" }, { list: \"bullet\" }],\n        [{ script: \"sub\" }, { script: \"super\" }], // superscript/subscript\n        [{ indent: \"-1\" }, { indent: \"+1\" }],\n        [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\n        [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n        [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n        [{ font: [] }],\n        [{ align: [] }],\n\n        [\"clean\"]\n      ]\n    };\n  }\n\n  handleCancel() {\n    this.props.history.goBack();\n  }\n\n  handleQuillChange() {\n    if (\n      this.editorRef.hasOwnProperty(\"current\") &&\n      this.editorRef.current !== null\n    ) {\n      this.setState({\n        editorDelta: this.editorRef.current.getEditor().getContents()\n      });\n    }\n  }\n\n  handleFormChangeEvent(event: any) {\n    let target = event.currentTarget;\n    console.log(target);\n    console.log(target.id);\n    if (\"id\" in target) {\n      switch (target.id) {\n        case \"formPostTitle\":\n          if (target.value.trim().length > 0) {\n            this.setState({\n              titleInvalid: false\n            });\n          } else {\n            this.setState({\n              titleInvalid: undefined,\n              formValidated: undefined\n            });\n          }\n          this.setState({\n            title: target.value.trim()\n          });\n          break;\n        case \"formPostTags\":\n          target.value = target.value.trim();\n          if (target.value === \"\" || validateTag(target.value)) {\n            if (this.state.tagsInvalid) {\n              this.setState({\n                tagsInvalid: false\n              });\n            }\n          } else {\n            if (!this.state.tagsInvalid) {\n              this.setState({\n                tagsInvalid: true\n              });\n            }\n          }\n          break; // TODO update tags validator\n        default:\n          break;\n      }\n    }\n  }\n\n  handlePreviewClick(event: any) {\n    event.preventDefault();\n    if (this.validateForm()) {\n      if (this.state.title && this.state.editorDelta && this.state.tags) {\n        let postData = {\n          title: this.state.title,\n          content: this.state.editorDelta,\n          tags: this.state.tags\n        };\n        this.props.onSubmit(postData);\n      }\n    }\n    // swap component\n  }\n\n  tagsChangeListener(event: any) {\n    if (event.key === \",\") {\n      event.preventDefault();\n      let tagValue = event.currentTarget.value.trim();\n      let currTags = this.state.tags;\n      if (tagValue !== \"\" && validateTag(tagValue)) {\n        currTags?.add(tagValue);\n        this.setState({\n          tags: currTags\n        });\n        event.currentTarget.value = \"\";\n      }\n    }\n  }\n\n  removeTagListener(event: any) {\n    let tagToRemove = event.currentTarget.getAttribute(\"data-tag-value\");\n    let currTags = this.state.tags;\n    currTags?.delete(tagToRemove);\n    this.setState({\n      tags: currTags\n    });\n  }\n\n  validateForm(): boolean {\n    if (this.state.formValidated) {\n      return true;\n    }\n    let isValid =\n      this.state.titleInvalid === false && this.state.quillValid === true;\n    this.setState({\n      formValidated: isValid\n    });\n    return isValid;\n  }\n\n  render() {\n    return (\n      <Row className=\"mt-0\">\n        <Col className=\"mt-0\">\n          <Card>\n            <Card.Body>\n              <Form validated={this.state.formValidated}>\n                <Form.Group controlId=\"formPostTitle\">\n                  <Form.Label>Title</Form.Label>\n                  <Form.Control\n                    isInvalid={this.state.titleInvalid}\n                    onChange={this.handleFormChangeEvent}\n                    type=\"input\"\n                    placeholder=\"Enter title\"\n                    value={this.state.title}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formPostContent\">\n                  <Form.Label>Content</Form.Label>\n                  <ReactQuill\n                    modules={this.modules}\n                    ref={this.editorRef}\n                    defaultValue={this.state.editorDelta}\n                    onChange={this.handleQuillChange}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formPostTags\">\n                  <Form.Label>Tags</Form.Label>\n                  <Form.Control\n                    onChange={this.handleFormChangeEvent}\n                    isInvalid={this.state.tagsInvalid}\n                    as=\"input\"\n                    onKeyPress={this.tagsChangeListener}\n                  />\n                  <Form.Text>\n                    {this.state.tags && (\n                      <TagGroup\n                        className=\"mt-2\"\n                        tags={this.state.tags}\n                        removeTagListener={this.removeTagListener}\n                      />\n                    )}\n                  </Form.Text>\n                </Form.Group>\n                <Form.Group>\n                  <Row className=\"row justify-content-end mr-0 ml-0\">\n                    <ButtonToolbar>\n                      <Form.Group controlId=\"formPostCancel\">\n                        <Button\n                          onClick={this.handleCancel}\n                          className=\"mr-3\"\n                          variant=\"outline-light\"\n                        >\n                          Cancel\n                        </Button>\n                      </Form.Group>\n                      <Form.Group controlId=\"formPostSubmit\">\n                        <Button\n                          onClick={this.handlePreviewClick}\n                          variant=\"primary\"\n                        >\n                          Preview\n                        </Button>\n                      </Form.Group>\n                    </ButtonToolbar>\n                  </Row>\n                </Form.Group>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { Button } from \"react-bootstrap\";\nimport MaterialIcon from \"@material/react-material-icon\";\nimport Post from \"./Post\";\nimport { PostData } from \"../types/Post\";\nimport GlobalContext from \"../contexts/GlobalContext\";\n\ntype PostPreviewProps = {\n  postData: PostData;\n  onEditor: () => void;\n  onSave: () => void;\n};\n\nexport default class PostPreview extends Component<PostPreviewProps> {\n  static contextType = GlobalContext;\n  render() {\n    return (\n      <>\n        <Alert key={\"preview-alert\"} variant=\"info\">\n          <Alert.Heading>\n            This a preview of what the post will look like.\n          </Alert.Heading>\n          <p>\n            If everything looks good, click the <b>Save</b> button. If you need\n            to make changes, click the <b>Editor</b> button.\n          </p>\n          <hr />\n          <div className=\"d-flex justify-content-end\">\n            <Button\n              onClick={this.props.onEditor}\n              variant=\"outline-info\"\n              className=\"mr-2\"\n            >\n              <MaterialIcon style={{ verticalAlign: \"middle\" }} icon=\"edit\" />\n              <span className={\"ml-1\"} style={{ verticalAlign: \"middle\" }}>\n                Editor\n              </span>\n            </Button>\n            <Button variant=\"info\" onClick={this.props.onSave}>\n              <MaterialIcon style={{ verticalAlign: \"middle\" }} icon=\"save\" />\n              <span className={\"ml-1\"} style={{ verticalAlign: \"middle\" }}>\n                Save\n              </span>\n            </Button>\n          </div>\n        </Alert>\n        <Post\n          title={this.props.postData.title}\n          content={this.props.postData.content}\n          tags={this.props.postData.tags}\n          username={\n            this.context.defaultUser && this.context.defaultUser.username\n          }\n        />\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport PostComposer from \"./PostComposer\";\nimport PostPreview from \"./PostPreview\";\nimport Quill from \"quill\";\nimport GlobalContext from \"../contexts/GlobalContext\";\nimport { PostData } from \"../types/Post\";\nconst Delta = Quill.import(\"delta\");\n\nexport type EditorProps = {\n  mode: string;\n};\ntype EditorState = {\n  postData: PostData | undefined;\n  preview: boolean;\n};\nexport default class Editor extends Component<\n  RouteComponentProps<EditorProps>,\n  EditorState\n> {\n  static contextType = GlobalContext;\n  constructor(props: RouteComponentProps<EditorProps>) {\n    super(props);\n    const delta = new Delta();\n    delta.insert(\"London\", { size: \"huge\" });\n    delta.insert(\"\\n\", { header: 1 });\n    delta.insert('console.log(\"blogging is fun\")');\n    delta.insert(\"\\n\", { \"code-block\": true });\n    this.state = {\n      postData: {\n        title: \"Title\",\n        content: delta,\n        tags: new Set<string>([\"tag1\", \"tag2\"])\n      },\n      preview: true\n    };\n    this.postDataChangeListener = this.postDataChangeListener.bind(this);\n    this.toggleComposer = this.toggleComposer.bind(this);\n    this.savePostData = this.savePostData.bind(this);\n  }\n\n  postDataChangeListener(postData: PostData) {\n    this.setState({\n      postData: postData,\n      preview: true\n    });\n  }\n\n  toggleComposer(): void {\n    this.setState({\n      preview: !this.state.preview\n    });\n  }\n\n  savePostData() {\n    if (this.state.postData) {\n      this.context.client.submitPost(this.state.postData);\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.postData && this.state.preview ? (\n          <PostPreview\n            onEditor={this.toggleComposer}\n            postData={this.state.postData}\n            onSave={this.savePostData}\n          />\n        ) : (\n          <PostComposer\n            postData={this.state.postData}\n            editMode={this.props.match.params.mode}\n            history={this.props.history}\n            onSubmit={this.postDataChangeListener}\n            onSave={this.savePostData}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Home from \"./components/Home\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  RouteComponentProps,\n  Switch\n} from \"react-router-dom\";\nimport PostContainer, { PostContainerParams } from \"./components/PostContainer\";\nimport UserContainer from \"./components/UserContainer\";\nimport APIHTTPClient from \"./clients/APIHTTPClient\";\nimport GlobalContext, { ModalState } from \"./contexts/GlobalContext\";\nimport { Modal } from \"react-bootstrap\";\nimport Editor, { EditorProps } from \"./components/Editor\";\nimport { UserData } from \"./types/User\";\nimport PostQuillContainer from \"./components/PostQuillContainer\";\n\ntype AppState = {\n  client?: APIHTTPClient;\n  defaultUser?: UserData;\n  modal: ModalState;\n};\n\nclass App extends Component<{}, AppState> {\n  private client: APIHTTPClient | undefined;\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      client: undefined,\n      defaultUser: undefined,\n      modal: {\n        enabled: false\n      }\n    };\n    this.updateModal = this.updateModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  updateModal(modal: ModalState): void {\n    this.setState({\n      modal: modal\n    });\n  }\n\n  closeModal(): void {\n    const modal = this.state.modal;\n    modal.enabled = false;\n    this.setState({\n      modal: modal\n    });\n  }\n\n  async componentDidMount(): Promise<void> {\n    if (!this.client || !this.state.client) {\n      this.client = new APIHTTPClient();\n      let defaultUser = await this.client.getDefaultUser();\n      this.setState({\n        client: this.client,\n        defaultUser: defaultUser\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Router>\n          <Container>\n            <Header className=\"mb-2\" />\n            <Switch>\n              <GlobalContext.Provider\n                value={{\n                  client: this.state.client,\n                  defaultUser: this.state.defaultUser,\n                  updateModal: this.updateModal\n                }}\n              >\n                <Route exact path=\"/\" component={Home} />\n                <Route\n                  path=\"/post/:postId\"\n                  component={(\n                    props: RouteComponentProps<PostContainerParams>\n                  ) => <PostContainer {...props} />}\n                  {...this.props}\n                />\n                <Route path=\"/user\" component={() => <UserContainer />} />\n                <Route\n                  path=\"/(edit|new)\"\n                  component={(props: RouteComponentProps<EditorProps>) => (\n                    <Editor {...props} />\n                  )}\n                  mode={\"edit\"}\n                  editMode={\"true\"}\n                />\n                <Modal\n                  show={this.state.modal.enabled}\n                  onHide={this.closeModal}\n                  centered\n                  autoFocus\n                  backdrop={\"static\"}\n                  size=\"lg\"\n                >\n                  <Modal.Header closeButton>\n                    <Modal.Title>{this.state.modal.title}</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n                    {typeof this.state.modal.body === \"object\" ? (\n                      <PostQuillContainer content={this.state.modal.body} />\n                    ) : (\n                      this.state.modal.body\n                    )}\n                  </Modal.Body>\n                  {this.state.modal.footer && (\n                    <Modal.Footer>{this.state.modal.footer}</Modal.Footer>\n                  )}\n                </Modal>\n              </GlobalContext.Provider>\n            </Switch>\n          </Container>\n        </Router>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./scss/custom.scss\";\nimport \"./scss/quill-dark.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}